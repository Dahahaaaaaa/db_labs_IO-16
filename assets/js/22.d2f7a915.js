(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{693:function(n,e,E){"use strict";E.r(e);var N=E(47),t=Object(N.a)({},(function(){var n=this,e=n.$createElement,E=n._self._c||e;return E("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[E("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[n._v("#")]),n._v(" Реалізація інформаційного та програмного забезпечення")]),n._v(" "),E("h2",{attrs:{id:"sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[n._v("#")]),n._v(" SQL-скрипт для створення на початкового наповнення бази даних")]),n._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[n._v("-- MySQL Script generated by MySQL Workbench\n-- Model: New Model    Version: 1.0\n-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema default_schema\n-- -----------------------------------------------------\n-- -----------------------------------------------------\n-- Schema OUR project\n-- -----------------------------------------------------\nDROP SCHEMA IF EXISTS `OUR project` ;\n\n-- -----------------------------------------------------\n-- Schema OUR project\n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `OUR project` DEFAULT CHARACTER SET utf8 ;\nUSE `OUR project` ;\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`user`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`user` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`user` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `email` VARCHAR(45) NOT NULL,\n  `username` VARCHAR(45) NOT NULL,\n  `avatar` VARCHAR(100) NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,\n  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`role`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`role` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`role` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `name` ENUM('ProjectManager', 'ProjectUser', 'SystemAdministrator') NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`access`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`access` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`access` (\n  `user_id` BINARY(16) NOT NULL,\n  `role_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`user_id`, `role_id`),\n  INDEX `fk_access_user_idx` (`user_id` ASC) VISIBLE,\n  INDEX `fk_access_role1_idx` (`role_id` ASC) VISIBLE,\n  CONSTRAINT `fk_access_user`\n    FOREIGN KEY (`user_id`)\n    REFERENCES `OUR project`.`user` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_access_role`\n    FOREIGN KEY (`role_id`)\n    REFERENCES `OUR project`.`role` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`operation_type`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`operation_type` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`operation_type` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `name` ENUM('create', 'read', 'update', 'delete') NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`request_type`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`request_type` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`request_type` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `object_id` BINARY(16) NOT NULL,\n  `operation_type_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`id`, `object_id`, `operation_type_id`),\n  INDEX `fk_request_type_operation_type1_idx` (`operation_type_id` ASC) VISIBLE,\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  CONSTRAINT `fk_request_operation`\n    FOREIGN KEY (`operation_type_id`)\n    REFERENCES `OUR project`.`operation_type` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`grant`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`grant` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`grant` (\n  `request_type_id` BINARY(16) NOT NULL,\n  `role_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`request_type_id`, `role_id`),\n  INDEX `fk_grant_role1_idx` (`role_id` ASC) VISIBLE,\n  CONSTRAINT `fk_grant_request`\n    FOREIGN KEY (`request_type_id`)\n    REFERENCES `OUR project`.`request_type` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_grant_role`\n    FOREIGN KEY (`role_id`)\n    REFERENCES `OUR project`.`role` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`workspace`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`workspace` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`workspace` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `name` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(200) NULL DEFAULT NULL,\n  `owner_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`id`, `owner_id`),\n  INDEX `fk_workspace_user1_idx` (`owner_id` ASC) VISIBLE,\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  UNIQUE INDEX `owner_id_UNIQUE` (`owner_id` ASC) VISIBLE,\n  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE,\n  CONSTRAINT `fk_workspace_user`\n    FOREIGN KEY (`owner_id`)\n    REFERENCES `OUR project`.`user` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`project`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`project` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`project` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `name` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(45) NULL DEFAULT NULL,\n  `manager_id` BINARY(16) NOT NULL,\n  `workspace_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`manager_id`, `workspace_id`, `id`),\n  INDEX `fk_project_user1_idx` (`manager_id` ASC) VISIBLE,\n  INDEX `fk_project_workspace1_idx` (`workspace_id` ASC) VISIBLE,\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  CONSTRAINT `fk_project_user`\n    FOREIGN KEY (`manager_id`)\n    REFERENCES `OUR project`.`user` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_project_workspace`\n    FOREIGN KEY (`workspace_id`)\n    REFERENCES `OUR project`.`workspace` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`board`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`board` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`board` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `name` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(200) NULL,\n  `project_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`id`, `project_id`),\n  INDEX `fk_board_project1_idx` (`project_id` ASC) VISIBLE,\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  CONSTRAINT `fk_board_project`\n    FOREIGN KEY (`project_id`)\n    REFERENCES `OUR project`.`project` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`task`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`task` ;\n\nCREATE TABLE IF NOT EXISTS `imbaza`.`task` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `title` VARCHAR(45) NOT NULL,\n  `description` VARCHAR(200) NULL DEFAULT NULL,\n  `photo` VARCHAR(100) NULL DEFAULT NULL,\n  `deadline` DATETIME NULL DEFAULT NULL,\n  `board_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`id`, `board_id`),\n  INDEX `fk_task_board1_idx` (`board_id` ASC) VISIBLE,\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  CONSTRAINT `fk_task_board`\n    FOREIGN KEY (`board_id`)\n    REFERENCES `OUR project`.`board` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`status`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`status` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`status` (\n  `id` BINARY(16) NOT NULL DEFAULT (UUID_TO_BIN(UUID())),\n  `name` ENUM('Done', 'BugFound', 'InReview', 'InProgress', 'ToDo', 'BackLog') NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,\n  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `OUR project`.`task_status`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `OUR project`.`task_status` ;\n\nCREATE TABLE IF NOT EXISTS `OUR project`.`task_status` (\n  `task_id` BINARY(16) NOT NULL,\n  `status_id` BINARY(16) NOT NULL,\n  PRIMARY KEY (`task_id`, `status_id`),\n  INDEX `fk_task_status_status1_idx` (`status_id` ASC) VISIBLE,\n  CONSTRAINT `fk_task_status_task`\n    FOREIGN KEY (`task_id`)\n    REFERENCES `OUR project`.`task` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_task_status_status`\n    FOREIGN KEY (`status_id`)\n    REFERENCES `OUR project`.`status` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n\n")])])]),E("h2",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[n._v("#")]),n._v(" RESTfull сервіс для управління даними")]),n._v(" "),E("div",{staticClass:"language- extra-class"},[E("pre",{pre:!0,attrs:{class:"language-text"}},[E("code",[n._v("import fastapi\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport pymysql\n\napp = FastAPI()\n\n\nclass DataBase(object):\n\n    def __new__(cls):\n        if not hasattr(cls, 'instance'):\n            cls.instance = super(DataBase, cls).__new__(cls)\n        return cls.instance\n\n    def __init__(self):\n        self.connection = None\n        self.cursor = None\n        self.__connect()\n\n\n    def __connect(self):\n        self.connection = pymysql.connect(\n            host='127.0.0.1',\n            port=3306,\n            user='root',\n            password='',\n            database='justchill',\n        )\n        self.cursor = self.connection.cursor(pymysql.cursors.DictCursor)\n\n    def execute(self, command):\n        self.cursor.execute(command)\n        result = self.cursor.fetchall()\n        self.connection.commit()\n        return result\n\n\n@app.get(\"/api/allusers\")\nasync def get_users():\n    db = DataBase()\n    return JSONResponse(db.execute('SELECT * FROM User'))\n\n\n@app.get('/api/user/{id}')\ndef get_user_by_id(id):\n    db = DataBase()\n    result = db.execute(f'SELECT * FROM User WHERE id={id}')\n    if not result:\n        raise fastapi.HTTPException(status_code=404)\n    return JSONResponse(result)\n\n\n@app.post('/api/adduser', status_code=201)\nasync def add_new_user(req: Request):\n    req_dict = await req.json()\n    try:\n        email = req_dict['email']\n        password = req_dict['password']\n        nickname = req_dict['nickname']\n        id_ban = req_dict['Ban']\n        print(req_dict['Ban'])\n    except:\n        raise fastapi.HTTPException(status_code=400)\n    db = DataBase()\n    db.execute(f\"INSERT INTO `User`(`email`, `password`, `nickname`, `Ban`) VALUES ('{email}','{password}','{nickname}',{id_ban});\")\n    return {'message': 'New user added!'}\n\n\n@app.put('/api/updateuser/{id}')\nasync def update_user(id, req: Request):\n    req_dict = await req.json()\n    db = DataBase()\n    for key in req_dict:\n         if not db.execute(f'SELECT * FROM User WHERE id={id}'):\n            raise fastapi.HTTPException(status_code=404)\n         db.execute(f'UPDATE User SET {key}=\"{req_dict[key]}\" WHERE id={id}')\n    return {\"message\": 'Updated!'}\n\n\n@app.delete('/api/deleteuser/{id}')\ndef delete(id):\n    db = DataBase()\n    if not db.execute(f'SELECT * FROM User WHERE id={id}'):\n        raise fastapi.HTTPException(status_code=404)\n    db.execute(f'DELETE FROM `User` WHERE id={id}')\n    return {'message': f'User with id={id} deleted'}\n    ```")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);